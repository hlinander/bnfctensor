entrypoints Book ;

Derivation. Book ::= [Stmt] ;

-----------------------------------------------------------------------
-- Statements
-----------------------------------------------------------------------

StmtVoid.        Stmt ::= Expr ";" ;
StmtAssign.      Stmt ::= "var" Label "=" Expr ";" ;
StmtSymmetry.    Stmt ::= Sym ";" ;
StmtTensorDef.   Stmt ::= "tensor" [LabelList] "{" [TensorDef] "}" ";" ;
StmtOpDef.       Stmt ::= "op" [LabelList] "{" [TensorDef] "}" ";" ;
StmtRowDoc.      Stmt ::= DocString ;
StmtFuncDef.     Stmt ::= "func" Ident "(" [Expr6] ")" "{" [Stmt] "}" ";" ;
-- FuncTypeDef. Stmt ::= 

(:[]). [Stmt] ::= Stmt ;
(:).   [Stmt] ::= Stmt [Stmt] ;

-- token Close '\n' ;

-----------------------------------------------------------------------
-- Tensor type declaration
-----------------------------------------------------------------------

ScalarDef. TensorDef  ::= ;
TensorDef. TensorDef  ::= [IndexDef] ":" TensorDef1 ;
GroupDef.  TensorDef1 ::= Label "(" [NumList] ")" ;

(:). [TensorDef] ::= TensorDef "*" [TensorDef] ;
(:[]). [TensorDef] ::= TensorDef ;

IndexGroup. IndexDef ::= Label "(" Integer ")" ;
(:). [IndexDef] ::= IndexDef "," [IndexDef] ;
(:[]). [IndexDef] ::= IndexDef ;

-- tensor T, U, V {
--     a(3), b(2): SO(3,1) *
--     c(3), d(3): SO(3) *
--     e(2): SU(3)
-- }

-----------------------------------------------------------------------
-- Base symmetry declarations
-----------------------------------------------------------------------

AntiSymmetric. Sym ::= "anti_symmetric" [LabelList] ;
Symmetric.     Sym ::= "symmetric" [LabelList] ;
Equality.      Sym ::= "sym" [LabelList] "{" [EqSym] "}" ;

-----------------------------------------------------------------------
-- Equality symmetry declarations
-----------------------------------------------------------------------

EqualityExpr. EqSym ::= SymExpr "=" SymExpr ;

(:[]). [EqSym] ::=  EqSym ";" ;
(:).   [EqSym] ::= EqSym ";" [EqSym] ;

NegSym.    SymExpr  ::= "-" SymExpr1 ;
TensorSym. SymExpr1 ::= Label [Index] ;

coercions SymExpr 1 ;

-----------------------------------------------------------------------
-- Tensor expressions
-----------------------------------------------------------------------

--Subst. Expr  ::= Expr "|" Expr "=====" Expr1 ;
Add.    Expr1 ::= Expr1 "+" Expr2 ;
Sub.    Expr1 ::= Expr1 "-" Expr2 ;
Neg.    Expr2 ::= "-" Expr2 ;           -- shift/reduce conflict with Sub
Mul.    Expr2 ::= Expr2 Expr3 ;
Div.    Expr2 ::= Expr2 "/" Expr3 ;
Op.     Expr4 ::= Label [Index] "~" "(" Expr ")" ;
Func.   Expr5 ::= Label "!" "(" [Expr] ")" ;
App.    Expr5 ::= Expr5 "//" Expr ;
Lambda. Expr6 ::= "\\" LabelList "->" Expr ;
-- PostFunc.  Expr5 ::= "(" Expr ")" ">>" Label;

-- (((\x,y -> x) s) t)

-- D@func!(vinst)
-- D A A @vinst

(:[]). [Expr] ::= Expr ;
(:).   [Expr] ::= Expr "," [Expr] ;

-----------------------------------------------------------------------
-- Tensor variables
-----------------------------------------------------------------------

-- Indexed. Expr3 ::= Expr3 [Index]
Tensor.  Expr6 ::= Label [Index] ;
Anon.    Expr6 ::= "$" Integer [Index] ;

-- - ($)

(:[]). [Expr6] ::= Expr6 ;
(:).   [Expr6] ::= Expr6 "," [Expr6] ;

coercions Expr 6 ;

-----------------------------------------------------------------------
-- Index variables
-----------------------------------------------------------------------

Upper. Index ::= "^" Label ;
Lower. Index ::= "." Label ;

[].   [Index] ::= ;
(:).  [Index] ::= Index [Index] ;

-----------------------------------------------------------------------
-- Numeric literal
-----------------------------------------------------------------------

Number. Expr6 ::= Integer ;
Fraction. Expr6 ::= Integer "/" Integer ;

NumList. NumList ::= Integer ;
(:).   [NumList] ::= NumList "," [NumList] ;
(:[]). [NumList] ::= NumList ;

-----------------------------------------------------------------------
-- Labels
-----------------------------------------------------------------------

LabelList. LabelList ::= Label ;
(:[]). [LabelList] ::= LabelList ;
(:). [LabelList] ::= LabelList "," [LabelList] ;

token Label letter (letter | digit | '\'' )* ;

-----------------------------------------------------------------------
-- Documentation
-----------------------------------------------------------------------

token DocString '#' (char - '\n') * ;

comment "//" ;
comment "/*" "*/" ;
